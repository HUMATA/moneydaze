@page "/"

@inject AppState appState

<h1>Overview</h1>

<div class="row">

    @if (totalIncome == 0)
    {
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Incomes</h3>
                </div>
                <div class="panel-body">
                    <p>You currently have no incomes :(</p>
                    <p>Why don't you <NavLink href="/incomes">add some</NavLink>?</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Incomes</h3>
                </div>
                <div class="panel-body">
                    Your current incomes totals: <strong>£@(Math.Round(totalIncome, 2))</strong>
                </div>
            </div>
        </div>
    }

    @if (totalOutgoings == 0)
    { 
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Outgoings</h3>
                </div>
                <div class="panel-body">
                    <p>You currently have no outgoings :)</p>
                    <p>Are you sure you don't have <NavLink href="/outgoings">something to add</NavLink>?</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Outgoings</h3>
                </div>
                <div class="panel-body">
                    Your current outgoings total: <strong>£@(Math.Round(totalOutgoings, 2))</strong>
                </div>
            </div>
        </div>
    }

</div>

@functions {

    private decimal totalIncome => appState.Incomes.Sum(x => x.Amount);
    private decimal totalOutgoings => appState.Outgoings.Sum(x => x.Amount);

    protected override async Task OnInitAsync()
    {
        appState.OnChange += StateHasChanged;

        await appState.LoadData();
    }

}